package main

import "fmt"

func main() {
	// объявляем слайс с отсортированными числами
	array := []int{1, 2, 2, 4, 4, 6, 6, 7, 8, 9, 10, 10}
	// объявляем число, которое будем искать
	number := 4

	// вызываем функцию бинарного поиска и передаем в нее искомое число и слайс,
	// на выходе получаем индекс искомого числа в слайсе с числами
	result := BinarySearch(number, array)

	fmt.Println(result)
}

func BinarySearch(number int, array []int) int {
	// индекс изначально объявляем равным нулю
	index := 0
	// и объявляем переменную, обозначающую середину слайса
	mid := len(array) / 2

	// проверяем несколько условий
	switch {
	case len(array) == 0:
		// если длина слайса равна 0, значит искать больше негде: возвращаем -1 (не найдено)
		return -1
	case array[mid] > number:
		// если значение в середине слайса больше, чем искомое число,
		// то вырезаем слайс от начала до середины и рекурсивно вызываем функцию поиска,
		// передавая ей искомое число и половину слайса с числами
		index = BinarySearch(number, array[:mid])
	case array[mid] < number:
		// если значение в середине слайса меньше, чем искомое число,
		// то вырезаем слайс от середины до конца и рекурсивно вызываем функцию поиска,
		// передавая ей искомое число и вторую половину слайса с числами
		index = BinarySearch(number, array[mid:])
		// если индекс, возвращенный функцией поиска, больше или равен 0
		if index >= 0 {
			// то присваиваем переменной индекса индекс середины слайса,
			// так как индекс искомой переменной был получен не из целого слайса,
			// а из его второй половины
			index += mid
		}
	default:
		// если значение из середины слайса равно искомому числу
		// то присваиваем переменной индекса индекс середины слайса
		index = mid
	}

	return index
}
